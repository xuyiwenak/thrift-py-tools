#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class result(object):
    """
    Attributes:
     - gameId
     - userId
     - udata
     - loc
     - gdata

    """


    def __init__(self, gameId=None, userId=None, udata=None, loc=None, gdata=None,):
        self.gameId = gameId
        self.userId = userId
        self.udata = udata
        self.loc = loc
        self.gdata = gdata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.gameId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.userId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.udata = UDATA()
                    self.udata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.loc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.gdata = GDATA()
                    self.gdata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('result')
        if self.gameId is not None:
            oprot.writeFieldBegin('gameId', TType.I32, 1)
            oprot.writeI32(self.gameId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.I64, 2)
            oprot.writeI64(self.userId)
            oprot.writeFieldEnd()
        if self.udata is not None:
            oprot.writeFieldBegin('udata', TType.STRUCT, 3)
            self.udata.write(oprot)
            oprot.writeFieldEnd()
        if self.loc is not None:
            oprot.writeFieldBegin('loc', TType.STRING, 4)
            oprot.writeString(self.loc.encode('utf-8') if sys.version_info[0] == 2 else self.loc)
            oprot.writeFieldEnd()
        if self.gdata is not None:
            oprot.writeFieldBegin('gdata', TType.STRUCT, 5)
            self.gdata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UDATA(object):
    """
    Attributes:
     - pdevid
     - mdevid
     - isbind
     - snsId
     - name
     - source
     - diamond
     - address
     - sex
     - state
     - payCount
     - snsinfo
     - vip
     - dayang
     - idcardno
     - phonenumber
     - truename
     - detect_phonenumber
     - lang
     - country
     - signature
     - set_name_sum
     - coupon
     - purl
     - beauty
     - charm
     - password
     - bindMobile
     - createTime
     - coin
     - chip
     - isBeauty
     - vipInfo
     - assistance
     - email

    """


    def __init__(self, pdevid=None, mdevid=None, isbind=None, snsId=None, name=None, source=None, diamond=None, address=None, sex=None, state=None, payCount=None, snsinfo=None, vip=None, dayang=None, idcardno=None, phonenumber=None, truename=None, detect_phonenumber=None, lang=None, country=None, signature=None, set_name_sum=None, coupon=None, purl=None, beauty=None, charm=None, password=None, bindMobile=None, createTime=None, coin=None, chip=None, isBeauty=None, vipInfo=None, assistance=None, email=None,):
        self.pdevid = pdevid
        self.mdevid = mdevid
        self.isbind = isbind
        self.snsId = snsId
        self.name = name
        self.source = source
        self.diamond = diamond
        self.address = address
        self.sex = sex
        self.state = state
        self.payCount = payCount
        self.snsinfo = snsinfo
        self.vip = vip
        self.dayang = dayang
        self.idcardno = idcardno
        self.phonenumber = phonenumber
        self.truename = truename
        self.detect_phonenumber = detect_phonenumber
        self.lang = lang
        self.country = country
        self.signature = signature
        self.set_name_sum = set_name_sum
        self.coupon = coupon
        self.purl = purl
        self.beauty = beauty
        self.charm = charm
        self.password = password
        self.bindMobile = bindMobile
        self.createTime = createTime
        self.coin = coin
        self.chip = chip
        self.isBeauty = isBeauty
        self.vipInfo = vipInfo
        self.assistance = assistance
        self.email = email

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pdevid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mdevid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.isbind = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.snsId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.source = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.diamond = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.sex = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.state = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.payCount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.snsinfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.DOUBLE:
                    self.vip = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.dayang = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.idcardno = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.phonenumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.truename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.detect_phonenumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.lang = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.signature = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.DOUBLE:
                    self.set_name_sum = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.DOUBLE:
                    self.coupon = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.purl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.DOUBLE:
                    self.beauty = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.DOUBLE:
                    self.charm = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.bindMobile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.createTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.DOUBLE:
                    self.coin = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.DOUBLE:
                    self.chip = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.isBeauty = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRUCT:
                    self.vipInfo = VIPINFO()
                    self.vipInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRUCT:
                    self.assistance = ASSISTANCE()
                    self.assistance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UDATA')
        if self.pdevid is not None:
            oprot.writeFieldBegin('pdevid', TType.STRING, 1)
            oprot.writeString(self.pdevid.encode('utf-8') if sys.version_info[0] == 2 else self.pdevid)
            oprot.writeFieldEnd()
        if self.mdevid is not None:
            oprot.writeFieldBegin('mdevid', TType.STRING, 2)
            oprot.writeString(self.mdevid.encode('utf-8') if sys.version_info[0] == 2 else self.mdevid)
            oprot.writeFieldEnd()
        if self.isbind is not None:
            oprot.writeFieldBegin('isbind', TType.DOUBLE, 3)
            oprot.writeDouble(self.isbind)
            oprot.writeFieldEnd()
        if self.snsId is not None:
            oprot.writeFieldBegin('snsId', TType.STRING, 4)
            oprot.writeString(self.snsId.encode('utf-8') if sys.version_info[0] == 2 else self.snsId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 5)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 6)
            oprot.writeString(self.source.encode('utf-8') if sys.version_info[0] == 2 else self.source)
            oprot.writeFieldEnd()
        if self.diamond is not None:
            oprot.writeFieldBegin('diamond', TType.DOUBLE, 7)
            oprot.writeDouble(self.diamond)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 8)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.sex is not None:
            oprot.writeFieldBegin('sex', TType.DOUBLE, 9)
            oprot.writeDouble(self.sex)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.DOUBLE, 10)
            oprot.writeDouble(self.state)
            oprot.writeFieldEnd()
        if self.payCount is not None:
            oprot.writeFieldBegin('payCount', TType.DOUBLE, 11)
            oprot.writeDouble(self.payCount)
            oprot.writeFieldEnd()
        if self.snsinfo is not None:
            oprot.writeFieldBegin('snsinfo', TType.STRING, 12)
            oprot.writeString(self.snsinfo.encode('utf-8') if sys.version_info[0] == 2 else self.snsinfo)
            oprot.writeFieldEnd()
        if self.vip is not None:
            oprot.writeFieldBegin('vip', TType.DOUBLE, 13)
            oprot.writeDouble(self.vip)
            oprot.writeFieldEnd()
        if self.dayang is not None:
            oprot.writeFieldBegin('dayang', TType.DOUBLE, 14)
            oprot.writeDouble(self.dayang)
            oprot.writeFieldEnd()
        if self.idcardno is not None:
            oprot.writeFieldBegin('idcardno', TType.STRING, 15)
            oprot.writeString(self.idcardno.encode('utf-8') if sys.version_info[0] == 2 else self.idcardno)
            oprot.writeFieldEnd()
        if self.phonenumber is not None:
            oprot.writeFieldBegin('phonenumber', TType.STRING, 16)
            oprot.writeString(self.phonenumber.encode('utf-8') if sys.version_info[0] == 2 else self.phonenumber)
            oprot.writeFieldEnd()
        if self.truename is not None:
            oprot.writeFieldBegin('truename', TType.STRING, 17)
            oprot.writeString(self.truename.encode('utf-8') if sys.version_info[0] == 2 else self.truename)
            oprot.writeFieldEnd()
        if self.detect_phonenumber is not None:
            oprot.writeFieldBegin('detect_phonenumber', TType.STRING, 18)
            oprot.writeString(self.detect_phonenumber.encode('utf-8') if sys.version_info[0] == 2 else self.detect_phonenumber)
            oprot.writeFieldEnd()
        if self.lang is not None:
            oprot.writeFieldBegin('lang', TType.STRING, 19)
            oprot.writeString(self.lang.encode('utf-8') if sys.version_info[0] == 2 else self.lang)
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 20)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 21)
            oprot.writeString(self.signature.encode('utf-8') if sys.version_info[0] == 2 else self.signature)
            oprot.writeFieldEnd()
        if self.set_name_sum is not None:
            oprot.writeFieldBegin('set_name_sum', TType.DOUBLE, 22)
            oprot.writeDouble(self.set_name_sum)
            oprot.writeFieldEnd()
        if self.coupon is not None:
            oprot.writeFieldBegin('coupon', TType.DOUBLE, 23)
            oprot.writeDouble(self.coupon)
            oprot.writeFieldEnd()
        if self.purl is not None:
            oprot.writeFieldBegin('purl', TType.STRING, 24)
            oprot.writeString(self.purl.encode('utf-8') if sys.version_info[0] == 2 else self.purl)
            oprot.writeFieldEnd()
        if self.beauty is not None:
            oprot.writeFieldBegin('beauty', TType.DOUBLE, 25)
            oprot.writeDouble(self.beauty)
            oprot.writeFieldEnd()
        if self.charm is not None:
            oprot.writeFieldBegin('charm', TType.DOUBLE, 26)
            oprot.writeDouble(self.charm)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 27)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.bindMobile is not None:
            oprot.writeFieldBegin('bindMobile', TType.STRING, 28)
            oprot.writeString(self.bindMobile.encode('utf-8') if sys.version_info[0] == 2 else self.bindMobile)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.STRING, 29)
            oprot.writeString(self.createTime.encode('utf-8') if sys.version_info[0] == 2 else self.createTime)
            oprot.writeFieldEnd()
        if self.coin is not None:
            oprot.writeFieldBegin('coin', TType.DOUBLE, 30)
            oprot.writeDouble(self.coin)
            oprot.writeFieldEnd()
        if self.chip is not None:
            oprot.writeFieldBegin('chip', TType.DOUBLE, 31)
            oprot.writeDouble(self.chip)
            oprot.writeFieldEnd()
        if self.isBeauty is not None:
            oprot.writeFieldBegin('isBeauty', TType.BOOL, 32)
            oprot.writeBool(self.isBeauty)
            oprot.writeFieldEnd()
        if self.vipInfo is not None:
            oprot.writeFieldBegin('vipInfo', TType.STRUCT, 33)
            self.vipInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.assistance is not None:
            oprot.writeFieldBegin('assistance', TType.STRUCT, 34)
            self.assistance.write(oprot)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 35)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VIPINFO(object):
    """
    Attributes:
     - level
     - name
     - exp
     - expCurrent
     - expNext

    """


    def __init__(self, level=None, name=None, exp=None, expCurrent=None, expNext=None,):
        self.level = level
        self.name = name
        self.exp = exp
        self.expCurrent = expCurrent
        self.expNext = expNext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.level = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.exp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.expCurrent = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.expNext = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VIPINFO')
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.DOUBLE, 1)
            oprot.writeDouble(self.level)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.exp is not None:
            oprot.writeFieldBegin('exp', TType.DOUBLE, 3)
            oprot.writeDouble(self.exp)
            oprot.writeFieldEnd()
        if self.expCurrent is not None:
            oprot.writeFieldBegin('expCurrent', TType.DOUBLE, 4)
            oprot.writeDouble(self.expCurrent)
            oprot.writeFieldEnd()
        if self.expNext is not None:
            oprot.writeFieldBegin('expNext', TType.DOUBLE, 5)
            oprot.writeDouble(self.expNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ASSISTANCE(object):
    """
    Attributes:
     - count
     - limit

    """


    def __init__(self, count=None, limit=None,):
        self.count = count
        self.limit = limit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.count = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.limit = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ASSISTANCE')
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.DOUBLE, 1)
            oprot.writeDouble(self.count)
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.DOUBLE, 2)
            oprot.writeDouble(self.limit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GDATA(object):
    """
    Attributes:
     - lastRoleId
     - serverId
     - isNewRoleId
     - headUrl
     - serverTimestamp

    """


    def __init__(self, lastRoleId=None, serverId=None, isNewRoleId=None, headUrl=None, serverTimestamp=None,):
        self.lastRoleId = lastRoleId
        self.serverId = serverId
        self.isNewRoleId = isNewRoleId
        self.headUrl = headUrl
        self.serverTimestamp = serverTimestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.lastRoleId = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.serverId = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.isNewRoleId = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.headUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.serverTimestamp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GDATA')
        if self.lastRoleId is not None:
            oprot.writeFieldBegin('lastRoleId', TType.DOUBLE, 1)
            oprot.writeDouble(self.lastRoleId)
            oprot.writeFieldEnd()
        if self.serverId is not None:
            oprot.writeFieldBegin('serverId', TType.DOUBLE, 2)
            oprot.writeDouble(self.serverId)
            oprot.writeFieldEnd()
        if self.isNewRoleId is not None:
            oprot.writeFieldBegin('isNewRoleId', TType.DOUBLE, 3)
            oprot.writeDouble(self.isNewRoleId)
            oprot.writeFieldEnd()
        if self.headUrl is not None:
            oprot.writeFieldBegin('headUrl', TType.STRING, 4)
            oprot.writeString(self.headUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headUrl)
            oprot.writeFieldEnd()
        if self.serverTimestamp is not None:
            oprot.writeFieldBegin('serverTimestamp', TType.DOUBLE, 5)
            oprot.writeDouble(self.serverTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(result)
result.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'gameId', None, None, ),  # 1
    (2, TType.I64, 'userId', None, None, ),  # 2
    (3, TType.STRUCT, 'udata', [UDATA, None], None, ),  # 3
    (4, TType.STRING, 'loc', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'gdata', [GDATA, None], None, ),  # 5
)
all_structs.append(UDATA)
UDATA.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pdevid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'mdevid', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'isbind', None, None, ),  # 3
    (4, TType.STRING, 'snsId', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'source', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'diamond', None, None, ),  # 7
    (8, TType.STRING, 'address', 'UTF8', None, ),  # 8
    (9, TType.DOUBLE, 'sex', None, None, ),  # 9
    (10, TType.DOUBLE, 'state', None, None, ),  # 10
    (11, TType.DOUBLE, 'payCount', None, None, ),  # 11
    (12, TType.STRING, 'snsinfo', 'UTF8', None, ),  # 12
    (13, TType.DOUBLE, 'vip', None, None, ),  # 13
    (14, TType.DOUBLE, 'dayang', None, None, ),  # 14
    (15, TType.STRING, 'idcardno', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'phonenumber', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'truename', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'detect_phonenumber', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'lang', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'country', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'signature', 'UTF8', None, ),  # 21
    (22, TType.DOUBLE, 'set_name_sum', None, None, ),  # 22
    (23, TType.DOUBLE, 'coupon', None, None, ),  # 23
    (24, TType.STRING, 'purl', 'UTF8', None, ),  # 24
    (25, TType.DOUBLE, 'beauty', None, None, ),  # 25
    (26, TType.DOUBLE, 'charm', None, None, ),  # 26
    (27, TType.STRING, 'password', 'UTF8', None, ),  # 27
    (28, TType.STRING, 'bindMobile', 'UTF8', None, ),  # 28
    (29, TType.STRING, 'createTime', 'UTF8', None, ),  # 29
    (30, TType.DOUBLE, 'coin', None, None, ),  # 30
    (31, TType.DOUBLE, 'chip', None, None, ),  # 31
    (32, TType.BOOL, 'isBeauty', None, None, ),  # 32
    (33, TType.STRUCT, 'vipInfo', [VIPINFO, None], None, ),  # 33
    (34, TType.STRUCT, 'assistance', [ASSISTANCE, None], None, ),  # 34
    (35, TType.STRING, 'email', 'UTF8', None, ),  # 35
)
all_structs.append(VIPINFO)
VIPINFO.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'level', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'exp', None, None, ),  # 3
    (4, TType.DOUBLE, 'expCurrent', None, None, ),  # 4
    (5, TType.DOUBLE, 'expNext', None, None, ),  # 5
)
all_structs.append(ASSISTANCE)
ASSISTANCE.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'count', None, None, ),  # 1
    (2, TType.DOUBLE, 'limit', None, None, ),  # 2
)
all_structs.append(GDATA)
GDATA.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'lastRoleId', None, None, ),  # 1
    (2, TType.DOUBLE, 'serverId', None, None, ),  # 2
    (3, TType.DOUBLE, 'isNewRoleId', None, None, ),  # 3
    (4, TType.STRING, 'headUrl', 'UTF8', None, ),  # 4
    (5, TType.DOUBLE, 'serverTimestamp', None, None, ),  # 5
)
fix_spec(all_structs)
del all_structs
